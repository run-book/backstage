import { Command } from "commander";
import { FileOps } from "@laoban/fileops";
import { Artifact, ModuleDependency, RawModuleData } from "./pom";
import { derefence, dollarsBracesVarDefn } from "@laoban/variables";
import { doubleXmlVariableDefn } from "@laoban/variables/dist/src/variables";
import { Gitstore } from "./gitstore";

export interface CommandContext {
  command: Command
  fileOps: FileOps
  gitstore: Gitstore
  currentDirectory: string
}


export interface RootCatalogTemplateDir {
  name: string
  targets: string
}
export function rootCatalogTemplateDir ( name: string, mds: ModuleDependency[], otherLocations: string[] ): RootCatalogTemplateDir {
  const fromPom = mds.map ( md => `   -  ./${md.module}/catalog-info.yaml` );
  const fromOther = otherLocations.map ( loc => `   -  ${loc}` )
  const targets = fromPom.concat ( fromOther ).join ( '\n' )
  return { name, targets }
}
export function applyRootCatalogTemplate ( dir: RootCatalogTemplateDir, template: string ): string {
  return derefence ( `RootCatalog`, dir, template, { variableDefn: doubleXmlVariableDefn } )
}

export interface CatalogTemplateDir {
  groupId: string
  artifactId: string
  description: string
  kind: string
  repository: string
  owner: string
  lifecycle: string
  dependsOn: string
}
export function catalogTemplateDir ( owner: string, md: ModuleDependency, repository: string, lifecycle: string ): CatalogTemplateDir {
  const dependsOn = md.deps.length===0? '' : 'dependsOn: \n' + md.deps.map ( a => `   -  component:${a.groupId}.${a.artifactId}` ).join ( '\n' )
  return {
    groupId: md.groupId,
    artifactId: md.artifactId,
    description: md.description ?? "Not provided in the POM",
    repository,
    lifecycle,
    owner,
    kind: md.kind,
    dependsOn
  }
}


export function applyCatalogTemplate ( dir: CatalogTemplateDir, template: string ) {
  return derefence ( `Making template for ${dir.groupId}.${dir.artifactId}`, dir, template, { variableDefn: doubleXmlVariableDefn } )
}

export const defaultCatalogTemplateUrl = undefined

export const defaultRootCatalog: string = `# Autogenerated by backstage-cli
apiVersion: backstage.io/v1alpha1
kind: Location
metadata:
  name: <<name>>
spec:
  type: url
  targets:
<<targets>>
`

export const defaultCatalog: string = `# Autogenerated by backstage-cli
apiVersion: backstage.io/v1alpha1
kind: <<kind>>
metadata:
  name: <<groupId>>.<<artifactId>>
  description: <<description>>
  tags:
    - java
    - maven
  annotations:
    backstage.io/source-location: <<repository>>
    backstage.io/maven-group-id: <<groupId>>
    backstage.io/maven-artifact-id: <<artifactId>>
spec:
  type: library
  owner: <<owner>>
  lifecycle: <<lifecycle>>
  <<dependsOn>>
`